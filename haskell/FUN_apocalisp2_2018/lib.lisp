(define > (lambda (x y) (eq? (eq? (eq? (eq? x y) #f) (< x y)) #f)))
(define >= (lambda (x y) (eq? (< x y) #f)))
(define <= (lambda (x y) (eq? (eq? (eq? (eq? (eq? x y) #f) (< x y)) #f) #f)))
(define abs (lambda (x) (cond ((< x 0) (* -1 x)) (#t x))))
(define and (lambda (x y) (cond ((eq? x #f) x) (#t y))))
(define not (lambda (x) (cond ((eq? x #f) #t) (#t #f))))
(define or (lambda (x y) (cond ((eq? x #f) y) (#t x))))
(define cadr (lambda (x) (car (cdr x))))
(define caddr (lambda (x) (car (cdr (cdr x)))))
(define caadr (lambda (x) (car (car (cdr x)))))
(define caaddr (lambda (x) (car (car (cdr (cdr x))))))
(define null? (lambda (x) (eq? x '())))
(define length (lambda (x) (cond ((eq? x '()) 0) (#t (+ (length (cdr x)) 1)))))
(define loopiota (lambda (z y) (cond ((eq? y z) '()) (#t (cons y (loopiota z (+ y 1)))))))
(define iota (lambda (x) (loopiota x 0)))
(define append (lambda (x y) (cond ((and (eq? y '()) (eq? x '())) '()) ((eq? x '()) (cons (car y) (append x (cdr y)))) (#t (cons (car x) (append (cdr x) y))))))
(define appends (lambda (x) (cond ((eq? x '()) '()) (#t (append (car x) (appends (cdr x)))))))
(define reverse (lambda (x) (cond ((eq? x '()) '()) (#t (append (reverse (cdr x)) (list (car x)))))))
(define map (lambda (x y) (cond ((eq? y '()) '()) (#t (cons (x (car y)) (map x (cdr y)))))))
(define filter (lambda (x y) (cond ((eq? y '()) '()) ((x (car y)) (cons (car y) (filter x (cdr y)))) (#t (filter x (cdr y))))))
(define fold-left (lambda (x y z) (cond ((eq? z '()) 0) ((eq? (cdr z) '()) (x y (car z))) (#t (fold-left x (x y (car z)) (cdr z))))))
(define fold-right (lambda (x y z) (cond ((eq? z '()) 0) ((eq? (cdr z) '()) (x (car z) y)) (#t (fold-right x (x (car z) y) (cdr z))))))
